%newfile new<fileName>.idl
%valuetype:box
<valuetypeType> <valuetypeName>;
%%
%valuetype:abstract
%operation:noraises
<returnType> <operationName>(<paramList>);
%%
%%
%valuetype:normal
string <valuetypeName>;
%truncatable
extends <truncatableList>
%%
%supports
implements <supportsName>
%%
%factory
class <factoryName> extends <raisesList>{
%param
	<paramType> <paramName>;
%%
};
%%
%statemember:public
%member
public <memberType> <memberName>;
%%
%%
%statemember:private
%member
private <memberType> <memberName>;
%%
%%
%operation:noraises
<returnType> <operationName>(<paramList>);
%%
%typedef
<typedefType> <typedefName>;
%%
%constants
const <constantsType> <constantsName> = <constantsValue>;
%%
%attribute:normal
<attributeType> <attributeName>();
%%
%%
%typedef:sequence
%length
<typedefType><sequenceLength> <typedefName>;
%%
%%
%enum
struct <enumName>{
%label
	const int <enumLabel> = IncNum(7);
%%
};
%%
%exception
struct <exceptionName>{
%member
	<memberType> <memberName>;
%%
};
%%
%union
union <unionName> switch(<switchType>){
%case
	case <caseValue>:
		<memberType> <memberName>;
		break;
%%
%default
	default:
		<memberType> <memberName>;
		break;
%%
};
%%
%interface
%typedef:array
<typedefType> <typedefName>;
%%
%native
native <nativeName>;
%%
%typedef:fixed
<typedefType> <typedefName> = <digitsNumber>+<scaleNumber>;
%%
%constants
const <constantsType> <constantsName> = <constantsValue>;
%%
%attribute:normal
<attributeType> <attributeName>();
%getraises
<attributeType> <attributeName>() throws <scopeList>;
%%
%setraises
void <attributeName>() throws <scopeList>;
%%
%%
%exception
struct <exceptionName>{
%member
	<memberType> <memberName>;
%%
};
%%
%union
union <unionName> switch(<switchType>){
%case
	case <caseValue>:
		<memberType> <memberName>;
		break;
%%
%default
	default:
		<memberType> <memberName>;
		break;
%%
};
%%
%struct
struct <structName>{
%member
	<memberType> <memberName>;
%%
};
%%
%operation:raises
<returnType> <operationName>(<paramList>) throws <raisesList>;
%%
%operation:noraises
<returnType> <operationName>(<paramList>);
%%
%operation
const long <interfaceName>_<operationName>_Hash = HASH("<operationName>");

struct <interfaceName>_<operationName>_In{
%param:IN
	<paramType> <paramName>;
%%
%param:INOUT
	<paramType> <paramName>;
%%
};
struct <interfaceName>_<operationName>_Out{
%param:OUT
	<paramType> <paramName>;
%%
%param:INOUT
	<paramType> <paramName>;
%%
%return
	<returnType> return_;
%%
};

struct <interfaceName>_<operationName>_Result{
	<interfaceName>_<operationName>_Out result;
};
%%
struct <interfaceName>_Call{
	long switchUnion;
%operation
	<interfaceName>_<operationName>_In <operationName>;
%%
	UnknownOperation unknowOp;
};
struct <interfaceName>_Request{
	RequestHeader header;
	<interfaceName>_Call data;
};
struct <interfaceName>_Return{
	long switchUnion;
%operation:oneway
	<interfaceName>_<operationName>_Result <operationName>;
%%
};
struct <interfaceName>_Reply{
	ReplyHeader header;
	<interfaceName>_Return data;
};
%%